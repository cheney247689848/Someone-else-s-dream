//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class MgrLuaThreadWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(MgrLuaThread), typeof(System.Object));
		L.RegFunction("Start", Start);
		L.RegFunction("Close", Close);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("New", _CreateMgrLuaThread);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateMgrLuaThread(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				LuaInterface.LuaState arg0 = (LuaInterface.LuaState)ToLua.CheckObject(L, 1, typeof(LuaInterface.LuaState));
				MgrLuaThread obj = new MgrLuaThread(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: MgrLuaThread.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Start(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			MgrLuaThread obj = (MgrLuaThread)ToLua.CheckObject(L, 1, typeof(MgrLuaThread));
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.Start(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MgrLuaThread obj = (MgrLuaThread)ToLua.CheckObject(L, 1, typeof(MgrLuaThread));
			obj.Close();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			MgrLuaThread obj = (MgrLuaThread)ToLua.CheckObject(L, 1, typeof(MgrLuaThread));
			obj.OnUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

