//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ToLuaFramework_ThreadEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ToLuaFramework.ThreadEvent), typeof(System.Object));
		L.RegFunction("New", _CreateToLuaFramework_ThreadEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Key", get_Key, set_Key);
		L.RegVar("evParams", get_evParams, set_evParams);
		L.RegVar("func", get_func, set_func);
		L.RegVar("funcCb", get_funcCb, set_funcCb);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateToLuaFramework_ThreadEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ToLuaFramework.ThreadEvent obj = new ToLuaFramework.ThreadEvent();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ToLuaFramework.ThreadEvent.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Key(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			string ret = obj.Key;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Key on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_evParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			System.Collections.Generic.List<object> ret = obj.evParams;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index evParams on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_func(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			ToLuaFramework.DelegateThreadFunc ret = obj.func;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index func on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_funcCb(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			ToLuaFramework.DelegateThreadFuncCb ret = obj.funcCb;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index funcCb on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Key(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Key = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Key on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_evParams(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			System.Collections.Generic.List<object> arg0 = (System.Collections.Generic.List<object>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<object>));
			obj.evParams = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index evParams on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_func(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			ToLuaFramework.DelegateThreadFunc arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ToLuaFramework.DelegateThreadFunc)ToLua.CheckObject(L, 2, typeof(ToLuaFramework.DelegateThreadFunc));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ToLuaFramework.DelegateThreadFunc), func) as ToLuaFramework.DelegateThreadFunc;
			}

			obj.func = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index func on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_funcCb(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ToLuaFramework.ThreadEvent obj = (ToLuaFramework.ThreadEvent)o;
			ToLuaFramework.DelegateThreadFuncCb arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (ToLuaFramework.DelegateThreadFuncCb)ToLua.CheckObject(L, 2, typeof(ToLuaFramework.DelegateThreadFuncCb));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(ToLuaFramework.DelegateThreadFuncCb), func) as ToLuaFramework.DelegateThreadFuncCb;
			}

			obj.funcCb = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index funcCb on a nil value" : e.Message);
		}
	}
}

